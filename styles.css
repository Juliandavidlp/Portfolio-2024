body { /*Una declaración*/
    background: #c3f3ff; 
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    /*El valor system-ui carga las fuentes del sistema operativo. Le damos fallbacks de fuentes*/
}

h1 {    
    /*color:rgb(0 0 0 / 50%); Para marcar la transparencia del canal alfa*/
    /* color: hsl(60, 75%, 44%) */
    /*color: oklch(72.06% 0.178 230.82 / 50%) Ver oklch.com*/
    /*color: transparent*/
    color:#1092dd;
    /*color:#09f;*/

    font-family: monospace;
    /*border-width: 3 px; Dibujo un borde de tres píxeles
      border-style: solid;
      border-color: currentColor; 
      El valor currentColor toma el mismo color del texto del elemento actual o del elemento padre*/
}

/*Clases*/

/*Siempre que se pueda tratar de evitar estilar por elementos o por id's. Es preferible usar clases
para no repetir estilos constantemente y reutilizar el código.*/

.link{
    color: #2c0361;
}

/* Estados y pseudoclases:

Hay elementos html que pueden encontrarse en un determinado estado o en situación especial,
y con css vamos a controlar los estilos que tiene ese elemento en ese estado.
Por ejemplo, cuando estamos encima de un ancor, de un link, hay un estado especial 
que es el estado de hover. Entonces podemos usar una pseudoclase para definir cómo se comporta ese elemento, 
por ejemplo por medio de :hover */


.link:hover{
    color:#1092dd;
    /*border: 2px solid currentColor; El borde en el contenido*/
    outline: 2px solid currentColor; /*outline es el contorno. /*
    /*La diferencia entre el borde y el contorno es que el borde afecta al contenido y el contorno se dibuja encima del contenido.
    Entonces si en vez de usar border usamos outline, el contorno, el borde no va a afectar el ancho, al contenido, 
    el contorno se va a dibujar encima del contenido
    */
}

.link:active{ /*Se aplica cuando un elemento está activo, cuando hacemos click. */
    outline: 2px solid #3d0c97;
}
    
/* .link:focus{Se aplica cuando por ejemplo en un campo de entrada -un input- recibe el foco.
    border: 1px solid #610603; 
} */

/* .link:disabled {
    ... */ 

/*Más pseudoclases: situaciones especiales de elementos con first-child y last-child */
.list-item:first-child{
    color:#2c0361
}

.list-item:last-child{
    color:#1092dd;

}

/*Selector por id*/
#show{
    background: #09f;
    color: white;
    border:0;
}

/*
.description{
    border: 1px solid #09f;}
    /* El width, el style y el color en un atajo*/
    
    /* Herencia: Valores especiales sobre la herencia.
        Hay propiedades que se heredan u otras que no:
        
        initial; Establece el valor inicial definido por las especificaciones de CSS.
        unset; Resetea el valor, le saca las propiedades heredadas y las convierte en no heredables.
        revert; Revierte el valor de la herencia, vuelve al valor por defecto excepto cuando ya exista un valor por defecto (inherit).
        inherit; Hereda, fuerza la herencia a partir del valor del padre.
   
        Nota: Las propiedades que por lo general se heredan tienen que ver con las fuentes y las del color del texto.
        Ante la duda, consultar en MDN-CSS.
    */

/*Selectores combinados:

Sirven para especificar cómo queremos estilar los elementos poniendo el contexto en relación al elemento padre, 
entonces primero busca el elemento de la izquierda y después selecciona el elemento a la derecha de manera especificada.
Hay distintos operadores para especificar distintos elementos combinados. Por ejemplo:

#Selector descendiente general:
li li{color:...}

*Operador para seleccionar un hijo directo, inmediato:
ul > li{opacity:70%}

*Operador para seleccionar el elemento siguiente, para seleccionar hermanos en general:
p ~ span{ Todos los elementos span que están después de un p son estilados.}

*Operador para seleccionar el hermano adyacente directo:

button + button{
    margin-left:16px;
}

Casacada:

La cascada en acción determina el órden en el que vemos
los estilos cuando hay conflictos de sobreescritura. En primer lugar,
tiene en cuenta la posición y el órden de escritura de las reglas de escritura.
Las reglas que están más abajo, las últimas son más importantes que las que están arriba,
de hecho esto es la base para usar fallbacks en CSS. Por ejemplo:
*/
p{
    color:#09f;
    color: oklch(70% 0.148 238.24);
    }

/*Como oklch no está soportado en todos los navegadores (https://caniuse.com/),
si el navegador no toma el último color, va a tomar el primero.*/

/* Especificidad (X.Y.Z)

En CSS tenemos un algoritmo que determina el selector CSS 
que tiene la coincidencia más fuerte, que básicamente calcula
la relevancia, la especificidad del selector en contexto.

   Unidades

Unidades absolutas

Píxeles: Los píxeles no son unidades completamente absolutas,
antes lo eran, hoy en día los píxeles visuales no se corresponden
con los píxeles de los dispositivos. Lo relativo es la densidad de píxeles
en la que queremos renderizar el contenido.

Unidades relativas

Porcentajes(50%): Es una unidad relativa del contenedor padre.

Relativas al wiewport:*/

.container{
    width: 50vw; /*El 50% del ancho del área de la ventana gráfica.*/
    height: 50vh; /*El 50% de la altura del área de la ventana gráfica */
    margin: 0;
}

/* Modelo de la caja

El ancho y el alto de los elementos en línea, no puede estilarse.
Los elementos de la caja de tipo en línea se comportan como texto,
motivo por el que no tienen ni alto ni ancho. 

En los elementos en línea lo que importa es el contenido del texto,
tienen un display:inline por defecto. Esto no ocurre,
por ejemplo si trabajamos con un div.

En general pensamos en dos tipos de cajas, 
en línea y en bloque. Flex y grid no dejan de ser tipos de cajas en bloque, 
pero afectan a sus hijos de una forma diferente, en bloque hay tipos
de cajas especiales distintas.

inline-block

flex-box

flex
grid

Ahora, el tamaño de una caja por defecto va a depender
del contenido, el padding y el borde. El margen no cambia
el ancho ni el alto de la caja, trabaja desde afuera.*/

.container{
    width: 100px;
    height: 100px;
    background: #2c0361;
    padding: 10px;
    border: 10 px solid red;
    margin: 16px;

    box-sizing: border-box;  
    /* Implica que el alto y el ancho de la caja el borde y el padding, hacia adentro*/ 
}

    



